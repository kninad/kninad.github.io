<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<title>This webpage</title>
<!-- 2019-03-02 Sat 11:34 -->
<meta  http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta  name="generator" content="Org-mode" />
<meta  name="author" content="Ninad Khargonkar" />
<link rel="stylesheet" type="text/css" href="../css/worg.css" />
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2013 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="content">
<h1 class="title">This webpage</h1>
<p>
<a href="../index.html">home</a> | <a href="../notes.html">notes</a> | <a href="../misc.html">misc</a>
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Using org mode</h2>
<div class="outline-text-2" id="text-1">
<p>
I started using org mode in Emacs to organize my notes in a portable text
format. In the process of learning about emacs and orgmode, I soon realized
about how useful orgmode is apart just taking notes. I used to it create the
html pages of this website using its publishing capabilities. I had to tweak
the css a bit to make it look how I like but apart from that it was a smooth 
process. I wrote the content in .org files and then published them to html
in the same folder. So it is a realtively light weight and small setup but
I guess I also don't need anything fancy as long as I am in control!
</p>
</div>
</div>


<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Old method: pandoc</h2>
<div class="outline-text-2" id="text-2">
<p>
I took the help of <a href="https://pandoc.org/">https://pandoc.org/</a> to simplify the entire process:
Pandoc is a very useful document converter and a handy tool for creating the 
html syntax of the website. 
After creating the necessary files (locally), I used 
<a href="https://pages.github.com/">https://pages.github.com/</a> for hosting the website.
</p>

<p>
Each page of this website was written in <a href="http://pandoc.org/MANUAL.html#pandocs-markdown">markdown</a>
and hence it was very easy to
write or modify the content and track the changes using git. 
The basic pandoc command for converting the markdown 
file to html will only output a plain html file. 
Although pandoc supports writing html syntax in the markdown file,
its usually not recommended as its better to keep the markdown file clean.
</p>


<p>
For further modifications, pandoc supports passing 
custom html files which can be added
to three positions (header, before-body and after-body) in the final html code 
for the page. Additionally, one can play around with the pandoc's default html 
template 
for gaining control over the placement of certain elements (like div) in the 
overall code. Finally the css file was created for styling the navigation bar 
and the page content.
</p>

<p>
To avoid writing the long pandoc command for each file, I wrote a simple bash 
script to run the command on all the markdown files which made
modifying the website content very easy.
</p>

<p>
<code>~</code>
pandoc \
        -H "$HEADER" \
        -B "$BEFORE" \
        -A "$AFTER" \
        -V author-meta="$AUTHOR" \
        -s &#x2013;template "$TEMPL" \
        -f markdown -t html5 $mf -o $filename.html                
<code>~</code>
</p>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="postamble">Created with the help of <a href="http://www.gnu.org/software/emacs/">Emacs</a> 25.2.2 (<a href="http://orgmode.org">Org</a> mode 8.2.10). Timestamp: 2019-03-02 Sat 11:33 </p>
</div>
</body>
</html>
